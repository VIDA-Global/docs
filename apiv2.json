{
  "openapi": "3.0.0",
  "info": {
    "version": "2.0.0",
    "title": "Vida API",
    "description": "Vida API Documentation"
  },
  "servers": [
    {
      "url": "https://{baseUrl}",
      "description": "Vida Production",
      "variables": {
        "baseUrl": {
          "default": "api.vida.dev",
          "description": "Production API Root"
        }
      }
    }
  ],
  "paths": {
    "/api/v2/tokens": {
      "get": {
        "tags": [
          "Authorization"
        ],
        "summary": "List tokens",
        "description": "List all your existing tokens.",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Success"
                    },
                    "tokens": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "token": {
                            "description": "Token",
                            "type": "string",
                            "example": "9fe4f9...."
                          },
                          "description": {
                            "description": "Friendly description of token",
                            "type": "string",
                            "example": "Main app"
                          },
                          "type": {
                            "description": "Token type",
                            "type": "string",
                            "example": "admin"
                          },
                          "timestamp": {
                            "description": "Timestamp when created",
                            "type": "string",
                            "example": "1678829072"
                          },
                          "userId": {
                            "description": "User Id that owns token",
                            "type": "number",
                            "example": 3
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "apiKeyAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Authorization"
        ],
        "summary": "Create a token",
        "description": "Create a new token for your account",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Token created successfully"
                    },
                    "token": {
                      "type": "object",
                      "properties": {
                        "token": {
                          "description": "Token",
                          "type": "string",
                          "example": "9fe4f9...."
                        },
                        "description": {
                          "description": "Friendly description of token",
                          "type": "string",
                          "example": "Main app"
                        },
                        "type": {
                          "description": "Token type",
                          "type": "string",
                          "example": "admin"
                        },
                        "timestamp": {
                          "description": "Timestamp when created",
                          "type": "string",
                          "example": "167882907"
                        },
                        "userId": {
                          "description": "User Id that owns token",
                          "type": "number",
                          "example": 3
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "apiKeyAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "type",
                  "description"
                ],
                "properties": {
                  "type": {
                    "description": "Permission for token. Only admin currently supported",
                    "type": "string",
                    "default": "admin"
                  },
                  "description": {
                    "description": "Friendly description for token",
                    "type": "string",
                    "example": "Main app"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Authorization"
        ],
        "summary": "Delete a token",
        "description": "Delete a token from your account",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Token deleted successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "apiKeyAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "token"
                ],
                "properties": {
                  "token": {
                    "description": "Token for deletion",
                    "type": "string",
                    "default": "9fe4f9...."
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/sip/ipWhitelist": {
      "get": {
        "tags": [
          "SIP"
        ],
        "summary": "List SIP IP Whitelist",
        "description": "List all your existing SIP IP whitelist entries.",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Success"
                    },
                    "whitelist": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "userId": {
                            "description": "User Id",
                            "type": "number",
                            "example": 3
                          },
                          "label": {
                            "description": "Friendly label for IP",
                            "type": "string",
                            "example": "Office IP"
                          },
                          "timestamp": {
                            "description": "Timestamp when created",
                            "type": "number",
                            "example": 1678829072
                          },
                          "ip": {
                            "description": "Whitelisted IP",
                            "type": "string",
                            "example": "192.168.1.1"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "apiKeyAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "SIP"
        ],
        "summary": "Add IP to SIP IP Whitelist",
        "description": "Add a new IP address to your SIP IP whitelist.",
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "IP entry created successfully"
                    },
                    "whitelist": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "userId": {
                            "description": "User Id",
                            "type": "number",
                            "example": 3
                          },
                          "label": {
                            "description": "Friendly label for IP",
                            "type": "string",
                            "example": "Office IP"
                          },
                          "timestamp": {
                            "description": "Timestamp when created",
                            "type": "number",
                            "example": 1678829072
                          },
                          "ip": {
                            "description": "Whitelisted IP",
                            "type": "string",
                            "example": "192.168.1.1"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "apiKeyAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "ip",
                  "label"
                ],
                "properties": {
                  "ip": {
                    "description": "IP address to whitelist",
                    "type": "string",
                    "example": "192.168.1.1"
                  },
                  "label": {
                    "description": "Friendly label for IP",
                    "type": "string",
                    "example": "Office IP"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "SIP"
        ],
        "summary": "Remove IP from SIP IP Whitelist",
        "description": "Remove an existing IP address from your SIP IP whitelist.",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "IP entry deleted successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "apiKeyAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "ip"
                ],
                "properties": {
                  "ip": {
                    "description": "IP address to remove",
                    "type": "string",
                    "example": "192.168.1.1"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/phoneNumber/return": {
      "post": {
        "tags": [
          "Phone Numbers"
        ],
        "summary": "Disconnect a phone number",
        "description": "Disconnect a phone number on your account. This will remove all services on the phone number as well.",
        "responses": {
          "200": {
            "description": "Successfully disconnected phone number",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Success"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Unable to disconnect phone number",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "A descriptive error message"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKeyAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "number"
                ],
                "properties": {
                  "number": {
                    "description": "Phone Number to disconnect on your account",
                    "type": "string",
                    "example": "+12145551234"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/phoneNumber/assign": {
      "post": {
        "tags": [
          "Phone Numbers"
        ],
        "summary": "Assign phone number to your account",
        "description": "Assign phone number to your account for use",
        "responses": {
          "200": {
            "description": "Successfully assigned phone number to account",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Success"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Unable to assign phone number",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "A descriptive error message"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKeyAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "number",
                  "country"
                ],
                "properties": {
                  "number": {
                    "description": "Phone Number to assign to your account",
                    "type": "string",
                    "example": "+12145551234"
                  },
                  "country": {
                    "description": "Country for the phone number to assign",
                    "type": "string",
                    "example": "US"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/phoneNumber/search/local/locality": {
      "post": {
        "tags": [
          "Phone Numbers"
        ],
        "summary": "Search for local numbers by locality",
        "description": "Search for a phone number based on city, region, and country.",
        "responses": {
          "200": {
            "description": "Successfully retrieved available numbers",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Success"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No phone numbers available for the search area. Please try a different area.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "A descriptive error message"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKeyAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "phoneNumber",
                  "code"
                ],
                "properties": {
                  "city": {
                    "description": "City you are searching for. If the particular city is unavailable, phone numbers from a 10 mile radius will be returned",
                    "type": "string",
                    "example": "Austin"
                  },
                  "region": {
                    "description": "Region for the search. If searching within the U.S., this will be the state",
                    "type": "string",
                    "example": "TX"
                  },
                  "country": {
                    "description": "Country for the search",
                    "type": "string",
                    "example": "US"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/phoneNumber/search/local/prefix": {
      "post": {
        "tags": [
          "Phone Numbers"
        ],
        "summary": "Search for local numbers by prefix",
        "description": "Search for a phone number based on prefix.",
        "responses": {
          "200": {
            "description": "Successfully retrieved available numbers",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Success"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No phone numbers available for the search area. Please try a different area.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "A descriptive error message"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKeyAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "phoneNumber",
                  "code"
                ],
                "properties": {
                  "prefix": {
                    "description": "Prefix you are searching for",
                    "type": "string",
                    "example": "216"
                  },
                  "country": {
                    "description": "Country used for the search",
                    "type": "string",
                    "example": "US"
                  },
                  "strict": {
                    "description": "If strict search is to be used. If no results found, will other numbers in same general area.",
                    "type": "boolean",
                    "default": true
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/phoneNumber/search/local/phrase": {
      "post": {
        "tags": [
          "Phone Numbers"
        ],
        "summary": "Search for local numbers by phrase",
        "description": "Search for a phone number based on phrase.",
        "responses": {
          "200": {
            "description": "Successfully retrieved available numbers",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Success"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No phone numbers available for the search area. Please try a different area.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "A descriptive error message"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKeyAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "phrase",
                  "country"
                ],
                "properties": {
                  "phrase": {
                    "description": "String to search for. This supports asterisk wildcards *",
                    "type": "string",
                    "example": "*bitcoin*"
                  },
                  "country": {
                    "description": "Country used for the search",
                    "type": "string",
                    "example": "US"
                  },
                  "region": {
                    "description": "Region for the search. If searching within the U.S., this will be the state",
                    "type": "string",
                    "example": "TX"
                  },
                  "city": {
                    "description": "City you are searching for. If the particular city is unavailable, phone numbers from a 10 mile radius will be returned",
                    "type": "string",
                    "example": "Austin"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/conversations": {
      "get": {
        "tags": [
          "Messaging"
        ],
        "summary": "List Priority Inbox",
        "description": "Fetch rooms in priority inbox",
        "parameters": [
          {
            "name": "pagination",
            "in": "query",
            "description": "Whether to provide pagination",
            "required": true,
            "example": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number to fetch",
            "required": false,
            "example": 0,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "How many rooms per page",
            "required": false,
            "example": 20,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "unread",
            "in": "query",
            "description": "Only return unread rooms",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pageSize": {
                      "type": "number",
                      "example": 20
                    },
                    "pageNumber": {
                      "type": "number",
                      "example": 0
                    },
                    "totalRooms": {
                      "type": "number",
                      "example": 100
                    },
                    "rooms": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "roomId": {
                            "description": "Room Id",
                            "type": "string",
                            "example": "3:15"
                          },
                          "name": {
                            "description": "Other users full name",
                            "type": "string",
                            "example": "John Doe"
                          },
                          "id": {
                            "description": "userId of other user",
                            "type": "number",
                            "example": 15
                          },
                          "image": {
                            "description": "Link to other users image",
                            "type": "string",
                            "example": "https://somepublicURl"
                          },
                          "vidaPhoneNumber": {
                            "description": "Other user Vida Phone Number",
                            "type": "string",
                            "example": "+12165169995"
                          },
                          "unregistered": {
                            "description": "If the other user is registered on Vida platform or offnet",
                            "type": "boolean",
                            "example": false
                          },
                          "unregisteredDisplayName": {
                            "description": "Display name for unregistered user which is often their phone number or email",
                            "type": "string",
                            "example": "+15125551234"
                          },
                          "destinationInboxType": {
                            "description": "Indicator which inbox on the other user side the conversation is in",
                            "type": "string",
                            "example": "+15125551234"
                          },
                          "lastMessage": {
                            "description": "Last message text in the room",
                            "type": "string",
                            "example": "That was awesome, thanks!"
                          },
                          "lastMessageTimestamp": {
                            "description": "Epoch of the last messages timestamp",
                            "type": "number",
                            "example": 1710510072
                          },
                          "chatAgentCampaignId": {
                            "description": "Agent Id that handled the message",
                            "type": "string",
                            "example": "campa....."
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKeyAuth": []
          }
        ]
      }
    },
    "/api/v2/agentConversations": {
      "get": {
        "tags": [
          "Messaging"
        ],
        "summary": "List Agent Inbox",
        "description": "Fetch rooms in agents inbox",
        "parameters": [
          {
            "name": "pagination",
            "in": "query",
            "description": "Whether to provide pagination",
            "required": true,
            "example": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number to fetch",
            "required": false,
            "example": 0,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "How many rooms per page",
            "required": false,
            "example": 20,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "unread",
            "in": "query",
            "description": "Only return unread rooms",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pageSize": {
                      "type": "number",
                      "example": 20
                    },
                    "pageNumber": {
                      "type": "number",
                      "example": 0
                    },
                    "totalRooms": {
                      "type": "number",
                      "example": 100
                    },
                    "rooms": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "roomId": {
                            "description": "Room Id",
                            "type": "string",
                            "example": "3:15"
                          },
                          "name": {
                            "description": "Other users full name",
                            "type": "string",
                            "example": "John Doe"
                          },
                          "id": {
                            "description": "userId of other user",
                            "type": "number",
                            "example": 15
                          },
                          "image": {
                            "description": "Link to other users image",
                            "type": "string",
                            "example": "https://somepublicURl"
                          },
                          "vidaPhoneNumber": {
                            "description": "Other user Vida Phone Number",
                            "type": "string",
                            "example": "+12165169995"
                          },
                          "unregistered": {
                            "description": "If the other user is registered on Vida platform or offnet",
                            "type": "boolean",
                            "example": false
                          },
                          "unregisteredDisplayName": {
                            "description": "Display name for unregistered user which is often their phone number or email",
                            "type": "string",
                            "example": "+15125551234"
                          },
                          "destinationInboxType": {
                            "description": "Indicator which inbox on the other user side the conversation is in",
                            "type": "string",
                            "example": "+15125551234"
                          },
                          "lastMessage": {
                            "description": "Last message text in the room",
                            "type": "string",
                            "example": "That was awesome, thanks!"
                          },
                          "lastMessageTimestamp": {
                            "description": "Epoch of the last messages timestamp",
                            "type": "number",
                            "example": 1710510072
                          },
                          "chatAgentCampaignId": {
                            "description": "Agent Id that handled the message",
                            "type": "string",
                            "example": "campa....."
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKeyAuth": []
          }
        ]
      }
    },
    "/api/v2/messages/{roomId}": {
      "get": {
        "tags": [
          "Messaging"
        ],
        "summary": "Fetch Room Messages",
        "description": "Fetch all messages for a particular room Id",
        "parameters": [
          {
            "name": "roomId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Room Id to fetch messages for",
            "example": "3:15"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "message": {
                        "description": "Message text",
                        "type": "string",
                        "example": "Hey there!"
                      },
                      "from": {
                        "description": "From User Id",
                        "type": "number",
                        "example": 15
                      },
                      "fromUser": {
                        "description": "From User Name",
                        "type": "string",
                        "example": "Brandon"
                      },
                      "to": {
                        "description": "From User Id",
                        "type": "number",
                        "example": 35554545
                      },
                      "toUser": {
                        "description": "To User Name",
                        "type": "string",
                        "example": "Jillian"
                      },
                      "timestamp": {
                        "description": "Epoch of the last messages timestamp",
                        "type": "number",
                        "example": 1699633022
                      },
                      "date": {
                        "description": "Friendly Date",
                        "type": "string",
                        "example": "2023-11-10T16:17:02.000Z"
                      },
                      "roomId": {
                        "description": "Room Id",
                        "type": "string",
                        "example": "15:35554545"
                      },
                      "status": {
                        "description": "If message was delivered. Status of success indicates delivered",
                        "type": "string",
                        "example": "success"
                      },
                      "attachments": {
                        "description": "Array of media attachment Urls.",
                        "type": "string",
                        "example": "[]"
                      },
                      "gift": {
                        "description": "If this message included a monetary gift",
                        "type": "boolean",
                        "example": false
                      },
                      "drip": {
                        "description": "If this message was a paid drip",
                        "type": "boolean",
                        "example": false
                      },
                      "uuid": {
                        "description": "Unique id for message",
                        "type": "string",
                        "example": "3b38f0af-7341-49fd-acce-1749c904e00d"
                      },
                      "source": {
                        "description": "Source medium for the message. Could have sourced from a vida client, sms, voice, email",
                        "type": "string",
                        "example": "sms"
                      },
                      "roomInitiator": {
                        "description": "User name who first initiated contact for the room",
                        "type": "string",
                        "example": "brandon"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKeyAuth": []
          }
        ]
      }
    },
    "/api/v2/messaging/settings/inboundCallbackUrl": {
      "post": {
        "tags": [
          "Messaging"
        ],
        "summary": "Configure Inbound Callback URL",
        "description": "Configure url for where Vida should send messages to your account",
        "responses": {
          "200": {
            "description": "Successfully set your inbound Messaging Callback URL",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Success"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Setting Failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "A descriptive error message"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "apiKeyAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "method",
                  "url"
                ],
                "properties": {
                  "method": {
                    "description": "HTTP Method to use when sending to your web service",
                    "type": "string",
                    "default": "POST"
                  },
                  "url": {
                    "description": "Full URL path where Vida will send your message.",
                    "type": "string",
                    "example": "https://yourdomain/endpoint"
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Messaging"
        ],
        "summary": "Retrieve Inbound Callback URL",
        "description": "Retrieve currently configured inbound callback url",
        "responses": {
          "200": {
            "description": "Successfully retrieve your settings",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Success"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Setting Failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "A descriptive error message"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "apiKeyAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Messaging"
        ],
        "summary": "Remove Inbound Callback Url",
        "description": "Remove Inbound Callback Url.",
        "responses": {
          "200": {
            "description": "Successfully removed callback url",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Success"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Setting Failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "A descriptive error message"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "apiKeyAuth": []
          }
        ]
      }
    },
    "/api/v2/messaging/send": {
      "post": {
        "tags": [
          "Messaging"
        ],
        "summary": "Send Message to a Vida User",
        "description": "Send a private message to a Vida User/Account",
        "responses": {
          "200": {
            "description": "Successfully sent message",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Success"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Message failed to send",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "A descriptive error message"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "apiKeyAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "toUsername"
                ],
                "properties": {
                  "toUsername": {
                    "description": "Vida username to send message to",
                    "type": "string",
                    "example": "brandon"
                  },
                  "message": {
                    "description": "Message text",
                    "type": "string",
                    "example": "See you in Miami!"
                  },
                  "zapAmount": {
                    "description": "Send a Zap to a Vida user. In Sats",
                    "type": "number",
                    "example": 21
                  },
                  "mediaUrls": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "example": [
                      "https://path/to/your/media/file1",
                      "https://path/to/your/media/file2"
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/agent/publish": {
      "post": {
        "tags": [
          "Agents"
        ],
        "summary": "Publish an Agent",
        "description": "Publish your staging agent to your active default agent. ",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Agent camp931829b5857f published"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKeyAuth": []
          }
        ]
      }
    },
    "/api/v2/agent/revert": {
      "post": {
        "tags": [
          "Agents"
        ],
        "summary": "Revert an Agent",
        "description": "Revert staging agent to current default active agent settings",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Agent camp931829b5857f unpublished"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKeyAuth": []
          }
        ]
      }
    },
    "/api/v2/messaging/createBrand": {
      "post": {
        "tags": [
          "Messaging"
        ],
        "summary": "Create Messaging Brand",
        "description": "Create a messaging brand needed for A2P Messaging Campaigns",
        "responses": {
          "200": {
            "description": "Brand Order Created Successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Brand Order Created Successfully"
                    },
                    "internalOrderId": {
                      "type": "string",
                      "example": "msgBrandOrder16892837723"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "apiKeyAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "displayName",
                  "companyName",
                  "ein",
                  "entityType",
                  "website",
                  "street",
                  "city",
                  "country",
                  "state",
                  "postalCode",
                  "phone"
                ],
                "properties": {
                  "displayName": {
                    "description": "Display Name for Brand",
                    "type": "string",
                    "example": "Wolf Cola"
                  },
                  "companyName": {
                    "description": "Company Full Name",
                    "type": "string",
                    "example": "Wolf Cola Global"
                  },
                  "ein": {
                    "description": "Business EIN",
                    "type": "string",
                    "example": "123456789"
                  },
                  "entityType": {
                    "description": "Entity Type ",
                    "type": "string",
                    "enum": [
                      "PRIVATE_PROFIT",
                      "PUBLIC_PROFIT"
                    ]
                  },
                  "website": {
                    "description": "Company Main Website. This is reviewed. ",
                    "type": "string",
                    "example": "https://vida.live"
                  },
                  "street": {
                    "description": "Street Address",
                    "type": "string",
                    "example": "555 East Street Suite 420"
                  },
                  "city": {
                    "description": "City",
                    "type": "string",
                    "example": "Cedar Park"
                  },
                  "country": {
                    "description": "Country",
                    "type": "string",
                    "example": "US"
                  },
                  "state": {
                    "description": "State Abbreviation",
                    "type": "string",
                    "example": "TX"
                  },
                  "postalCode": {
                    "description": "Postal Code",
                    "type": "string",
                    "example": "78613"
                  },
                  "phone": {
                    "description": "Phone Number",
                    "type": "string",
                    "example": "5558675309"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/agent": {
      "post": {
        "tags": [
          "Agents"
        ],
        "summary": "Update Agent",
        "description": "Update an agent",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Agent created."
                    },
                    "campaignId": {
                      "type": "string",
                      "example": "camp931829b5857f...."
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKeyAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "type",
                  "title",
                  "description"
                ],
                "properties": {
                  "type": {
                    "description": "Type for this agent",
                    "type": "string",
                    "enum": [
                      "chatAgent"
                    ]
                  },
                  "title": {
                    "description": "Title for Agent",
                    "type": "string",
                    "example": "Call Screener"
                  },
                  "description": {
                    "description": "Some description",
                    "type": "string",
                    "example": "Description"
                  },
                  "welcomeMessage": {
                    "description": "Message users see when initially visiting a agent",
                    "type": "string",
                    "example": "This brought to you by Wolf Cola"
                  },
                  "welcomeMedia": {
                    "description": "Media (e.g. Video Links) users see when initially visiting a campaign attached object such as a room or chatAgent",
                    "type": "string",
                    "example": "https://link.to.your.video"
                  },
                  "welcomeMessageRecording": {
                    "description": "Audio file (mp3) that is played when someone dials into your campaign Phone Number. This file must be uploaded to your vida media",
                    "type": "string",
                    "example": "greeting.mp3"
                  },
                  "links": {
                    "description": "Array of any http links to reference for external knowledge for your agent",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "example": [
                      "https://vida.io/faq"
                    ]
                  },
                  "actions": {
                    "description": "Actions that your agent can take including instructions and settings",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "example": [
                      "transfer"
                    ]
                  },
                  "agentVoice": {
                    "description": "Agent voice model to use",
                    "type": "string",
                    "example": "en-US Female"
                  },
                  "agentTtsEngine": {
                    "description": "Text to speech engine for this agent",
                    "type": "string",
                    "enum": [
                      "google",
                      "11labs"
                    ],
                    "default": "google"
                  },
                  "agentLang": {
                    "description": "Agent language to be used for voice and transcriptions",
                    "type": "string",
                    "enum": [
                      "en-US",
                      "es-MX",
                      "es-ES",
                      "es-US"
                    ],
                    "default": "en-US"
                  },
                  "postRewardMessage": {
                    "description": "Message sent to the user after they have received a reward from a chatAgent or sponsored room",
                    "type": "string",
                    "example": "Thanks for watching to receive 10% off your next order, use promo code GIVEME10OFF"
                  },
                  "postRewardMedia": {
                    "description": "Media (e.g. Video Links) users see along with your post reward message",
                    "type": "string",
                    "example": "https://link.to.your.video"
                  },
                  "postRewardQualifiedLeadMessage": {
                    "description": "Message sent to the user after reward grant that has met the minimum quality lead score",
                    "type": "string",
                    "example": "Wow! This looks like a match made in heaven. Here is an additional 25% off if you sign up with us today!"
                  },
                  "qualityLeadMinScore": {
                    "description": "Minimum lead score to be considered a quality lead. Will move to priority inbox and trigger postRewardQualifiedLeadMessage if set",
                    "type": "integer",
                    "example": 5,
                    "default": 6
                  },
                  "agentInstructions": {
                    "description": "Agent instructions for user interaction. This is for chatAgents only",
                    "type": "string",
                    "example": "I want you to payout rewards for users that answer a few questions about this promotional video."
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/agentEventRules/staging": {
      "get": {
        "tags": [
          "Agents"
        ],
        "summary": "Fetch Staging Agent",
        "description": "Fetch your Staging agent configuration.",
        "responses": {
          "200": {
            "description": "Agent retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKeyAuth": []
          }
        ]
      }
    },
    "/api/v2/agentEventRules/default": {
      "get": {
        "tags": [
          "Agents"
        ],
        "summary": "Fetch Live Agent",
        "description": "Fetch your Live (default) agent configuration.",
        "responses": {
          "200": {
            "description": "Agent retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKeyAuth": []
          }
        ]
      }
    },
    "/api/v2/checkAgentUrl": {
      "get": {
        "tags": [
          "Agent URLs"
        ],
        "summary": "Check agent url availability",
        "description": "Check if an agent url is available for use",
        "parameters": [
          {
            "name": "targetUsername",
            "in": "query",
            "description": "Target username",
            "required": true,
            "example": "brandon",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "slug",
            "in": "query",
            "description": "Desired slug name",
            "required": true,
            "example": "weloveVida",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Slug created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "available": {
                      "type": "boolean",
                      "example": true
                    },
                    "slug": {
                      "type": "string",
                      "example": "welovevida"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKeyAuth": []
          }
        ]
      }
    },
    "/api/v2/agentUrl": {
      "get": {
        "tags": [
          "Agent URLs"
        ],
        "summary": "Fetch existing agent url",
        "description": "Check if existing agent url exists for a user or create new one",
        "parameters": [
          {
            "name": "targetUsername",
            "in": "query",
            "description": "Target username",
            "required": true,
            "example": "brandon",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Slug retrieved/fetched successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "slug": {
                      "type": "string",
                      "example": "welovevida"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKeyAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Agent URLs"
        ],
        "summary": "Create agent url",
        "description": "Create a new url for an agent and replace existing one if exists",
        "responses": {
          "200": {
            "description": "Referral Slug Created Successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "slug": {
                      "type": "string",
                      "example": "welovevida"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKeyAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "targetUsername",
                  "slug"
                ],
                "properties": {
                  "targetUsername": {
                    "description": "Target Username you are creating a referral slug for",
                    "type": "string",
                    "example": "brandon"
                  },
                  "slug": {
                    "description": "Desired slug name",
                    "type": "string",
                    "example": "welovevida"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/agent/{agentId}": {
      "get": {
        "tags": [
          "Agents"
        ],
        "summary": "Get Agent",
        "description": "Fetch an agent details",
        "parameters": [
          {
            "name": "agentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Agent Id",
            "example": "campa931829b5857f...."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Success"
                    },
                    "sponsorship": {
                      "properties": {
                        "id": {
                          "description": "Agent Id",
                          "type": "string",
                          "example": "campa931829b5857f...."
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKeyAuth": []
          }
        ]
      }
    },
    "/api/v2/agent/outboundCall": {
      "post": {
        "tags": [
          "Agents"
        ],
        "summary": "Outbound Call from Agent",
        "description": "Use this endpoint to initiate an outbound call from an active Vida Business agent to a destination number. The agent will handle the call.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Outbound call initiated."
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "apiKeyAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "campaignId",
                  "toNumber"
                ],
                "properties": {
                  "campaignId": {
                    "description": "The ID of the agent that will be making the call.",
                    "type": "string",
                    "example": "campa931829b5857f"
                  },
                  "toNumber": {
                    "description": "The destination number your campaign agent is calling.",
                    "type": "string",
                    "example": "+15125558278"
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "apiKeyAuth": {
        "type": "apiKey",
        "in": "query",
        "name": "token",
        "description": "Vida API Token"
      }
    }
  }
}